/**
 * @file Defines the chained template for the blog post CplusplusInclude.11ty.js
 * @author Andreas Pappas <andrewpap1997@gmail.com>
 * @see {@link https://www.11ty.dev/docs/layouts/#layout-chaining Layout chaining in 11ty}
 */

/**
 * Acts as front matter in JavaScript templates
 * @see {@link https://www.11ty.dev/docs/languages/javascript/#optional-data-method Optional `data` in JavaScript templates in 11ty}
 */
 export var data = {
    title: 'The #include <> preprocessor statement. 🤯',
    date: '2021-07-30',
    permalink: '/blog/CplusplusInclude/',
    templateEngineOverride: '11ty.js,md',
    description: 'Get to learn the use of header files in C and C++ as well as what preprocessor and it\'s statements are. ⌨️'
}

/**
 * The content of the blog post
 * @method
 * @name render()
 * @param {Object} data 11ty’s data object
 * @return {String} The rendered template
 */
 export var render = data =>
 `

 <img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xgf68nfl--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y15yxxw9spaqdqxyjfot.jpg" alt="artixDesktop" style="width:100%; height:auto;">

 Hi there 👋 

 The first sentence that I want to write here is the following, 
 
 > The <code>#include</code> preprocessor statement, all that it does is literally <strong>copy and paste</strong> the contents of the header file specified after the #include <> into our file, on the particular line of our file that we placed that statement. 
 
 <img src="https://media.giphy.com/media/6JB4v4xPTAQFi/giphy.gif" alt="artixDesktop" style="width:100%; height:auto;">
 
 🙃 Alright then, keep reading and you might do so! 
 
 Remember my first sentence that the preprocessor statement <code>#include</code> all that does is take the file that is specified after it and literally copy paste it's content into our <code>.cpp</code> file?
 
 Well let's prove that. 
 
 Let's say we have the following C++ code, 
 
 File: <code>addNumbers.cpp</code>
 
 <pre><code>
 int addNumber(int x, int y) 
 {
     return x + y;
 }
 </code></pre>
 
 Simply we wrote a function that takes as input 2 integers and returns their sum. 
 
 If we try to compile the above code, it should compile successfully without any errors. 
 
 Now let's say that we forget the closing brace at the end of our code, so it looks like this: 
 
 <pre><code>
 int addNumber(int x, int y) 
 {
     return x + y;
                         /// <--- notice the closing curly brace missing on this line.
 </code></pre>
 
 If we compile the below code we should get an error that we do miss a closing curly brace on line 4. 
 
 How can we fix that? 
 
 Either we can simply edit the file and add back our closing curly brace, or we can get a bit crazy and prove our very first statement of the <code>#include</code> preprocessor statement literally copy pasting into our <code>addNumbers.cpp</code> file the content of the header file that is after our include statement. 
 
 So let's create a header file. 
 
 File: <code>closingBrace.h</code>
 
 <pre><code>
 }
 </code></pre>
 
 Yeah, exactly, our closingBrace.h file simply contains one character. The closing curly brace itself --> <code>}</code>
 
 Now take a look at the below code, 
 
 <pre><code>
 int addNumber(int x, int y) 
 {
     return x + y;
 #include "closingBrace.h"
 </code></pre>
 
 What do you think will happen if we compile this file? 
 
 Well, it will compile properly without any errors. 
 
 Why is that? 
 
 Well, if you create the 2 files above in Microsoft Visual Studio and compile them, you can then see in your project a file with the extension <code>.i</code> in particular you will see a file called: <code>closingBrace.i</code> 
 
 What this file is, is simply a file that is generated by the Microsoft Visual Studio compiler and it simply contains the contents of the output of the preprocessor instead of directly creating the object file from our C++ source file.
 
 > How to generate the <code>.i</code> preprocessed file? 
 
 <hr>
 
 To generate a preprocessed file (.i file), just add "-EP -P" to the compile option, and recompile the original .cpp file. You can also generate a .i file directly from the "Prepocessor" property in Visual Studio*:
 
  1. Right click the file name, and click properties
  2. Click Preprocessor Generate Preprocessed File Without Line Numbers (/EP /P)
 
 If you recompile from a command window, the .i file will be created under the current directory. if you recompile from within the Visual Studio* IDE, the .i file will be created under the directory where the original source file is located.
 
 <hr>
 
 Well if you go on and open that file you will see the following contents: 
 
 <img src="https://media.giphy.com/media/3orieUe6ejxSFxYCXe/giphy.gif" alt="artixDesktop" style="width:100%; height:auto;">

 <pre><code>
 int addNumber(int x, int y) 
 {
     return x + y;
 }
 </code></pre>
 
 Does it remind you of anything? 
 
 Well that was the proof that the preprocessor translated our <code>#include "closingBrace.h"</code> statement into a simple <code>}</code> character. 
 And that is because it literally copy pasted the contents of the closingBrance.h file and replaced our #include statement with that content, and since we simply had only a <code>}</code> inside that file, that's what it copy pasted on that particular line that we placed our statement. 
 
 And that's all there is to it about the <code>#include</code> preprocessor statement and also about how we do use header files aka <code>.h</code> files in C++!
 
 <hr>
 
 I hope you enjoyed the article and learned something new today as I myself did! 
 
 I've also started writing down a C++ course on my GitHub account on the following 👉🏻 [repository](https://github.com/andrewpap22/DearCplusplus), so you can check it out if you want to learn more cool stuff about how C++, it's compiler and linker do work and also best practices about writing fast and efficient C++ code. 
 
 I will be doing blog posts on several parts of the above course like this one in general, but if you want the A-Z of it then you can check the above repository mentioned! 
 
 > Obviously contribution and corrections are much more than welcome! 
 
 <hr>
 
`